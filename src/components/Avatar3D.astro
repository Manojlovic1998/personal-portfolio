---

---

<!--Component Template -->
<div id="avatar-canvas-container" class="w-full min-h-[inherit] md:w-1/2"></div>
<script>
  import World from "../utils/threejs/World";
  import loadGLTFObject from "../utils/threejs/loadGLTFObject";
  import type { CameraSettings } from "../utils/threejs/createCamera";
  import { getMousePos, getMouseDegrees } from "../utils/threejs/mouseHelpers";
  import createFloor from "../utils/threejs/createFloor";
  import { MathUtils } from "three";
  import { Bone, Vector3, Mesh } from "three";
  import matchMediaQuery from "../utils/threejs/matchMediaQuery";

  const main = async () => {
    let neck: null | Bone = null;
    let waist: null | Bone = null;
    // Get a reference to the container element
    const container = document.getElementById(
      "avatar-canvas-container",
    ) as HTMLElement;
    const camneraSettings: CameraSettings = {
      fov: 50,
      position: { x: 2.3, y: 0, z: 0 },
    };

    // Crate a new World
    const world = new World(container, undefined, camneraSettings, undefined, {
      enabled: true,
      enableDamping: true,
      enablePan: false,
      enableZoom: false,
    });

    world.renderer.shadowMap.enabled = true;

    world.init = async () => {
      world.lights.mainLight.castShadow = true;

      // Load models
      const objectList = await loadGLTFObject(
        [
          {
            path: `${
              import.meta.env.BASE_URL
            }assets/models/obj/avatar/avatarAnim.glb`,
          },
        ],
        (animation) => {
          if (animation.name === "Armature.001|mixamo.com|Layer0") {
            // Remove neck and spine skeleton tracks out of the animation
            animation.tracks.splice(3, 3);
            animation.tracks.splice(3, 3);
            animation.tracks.splice(3, 3);
            animation.tracks.splice(3, 3);
          }
        },
      );
      // Check if the models have been loaded
      // If so add them to the scene
      if (objectList && objectList[0]) {
        // Get the avatar model
        const avatar = objectList[0];

        // Set the position of the model
        avatar.model.position.set(0, -0.9, 0);

        // Rotate the model
        avatar.model.rotation.z = MathUtils.degToRad(-90);

        // Add the model to the updatable list
        if (avatar.tick) world.loop.updatables.push(avatar);

        // Add the model to the scene
        await world.scene.add(avatar.model);

        // Get the neck and waist bones
        avatar.model.traverse((object) => {
          if (object instanceof Mesh) {
            object.castShadow = true;
            object.receiveShadow = true;
          }

          if (object instanceof Bone && object.name === "mixamorigNeck")
            neck = object;
          if (object instanceof Bone && object.name === "mixamorigSpine1")
            waist = object;
        });

        // Event listeners
        document.addEventListener("mousemove", (event) => {
          var mousecoords = getMousePos(event);
          if (neck && waist) {
            moveJoint(mousecoords, neck, 45, world.renderer.domElement);
            moveJoint(mousecoords, waist, 20, world.renderer.domElement);
          }
        });

        const onMatchCallback = () => {
          const canvas = document.getElementsByClassName(
            "scene",
          )[0] as HTMLElement;
          canvas.style.touchAction = "pan-y";
          world.controls.enabled = true;
          world.controls.enableZoom = false;

          world.controls.update();

          avatar.model.traverse((object) => {
            if (object instanceof Mesh) {
              object.castShadow = false;
              object.receiveShadow = false;
            }
          });
        };

        const onMismatchCallback = () => {
          const canvas = document.getElementsByClassName(
            "scene",
          )[0] as HTMLElement;
          console.log("mismatch");
          canvas.style.touchAction = "none";
          world.controls.enabled = false;
          world.controls.reset();

          avatar.model.traverse((object) => {
            if (object instanceof Mesh) {
              object.castShadow = true;
              object.receiveShadow = true;
            }
          });
        };

        const mobileTouchAction = matchMediaQuery(
          "(max-width: 768px)",
          onMatchCallback,
          onMismatchCallback,
        );

        // Create floor
        const floor = createFloor({
          width: 10000,
          height: 10000,
          widthSegments: 1,
          heightSegments: 1,
          rotation: -90,
          receiveShadow: true,
          meshParameters: {
            opacity: 0.1,
          },
          position: new Vector3(0, -0.9, 0),
        });

        world.scene.add(floor);
      }
    };

    // const mixer = new AnimationMixer()
    // Complete async tasks
    await world.init();

    // Start the animation loop
    world.start();
  };

  const moveJoint = (
    mouse: { x: number; y: number },
    joint: Bone,
    degreeLimit: number,
    canvas: HTMLElement,
  ) => {
    let degrees = getMouseDegrees(mouse.x, mouse.y, degreeLimit, canvas);

    joint.rotation.y = MathUtils.degToRad(degrees.x);
    joint.rotation.x = MathUtils.degToRad(degrees.y);
  };

  main();
</script>
