---

---

<!--Component Template -->
<div id="avatar-canvas-container" class="max-w-[591px] min-h-[494px] h-full">
</div>
<script>
  import World from "../utils/threejs/World";
  import loadGLTFObject from "../utils/threejs/loadGLTFObject";
  import type { CameraSettings } from "../utils/threejs/createCamera";
  import enableMobileTouchAction from "../utils/threejs/enableMobielTouchAction";
  import { getMousePos, getMouseDegrees } from "../utils/threejs/mouseHelpers";
  import { MathUtils } from "three/src/math/MathUtils";
  import { Bone } from "three";

  const main = async () => {
    let neck: null | Bone = null;
    let waist: null | Bone = null;
    // Get a reference to the container element
    const container = document.getElementById(
      "avatar-canvas-container",
    ) as HTMLElement;
    const camneraSettings: CameraSettings = {
      fov: 50,
      position: { x: 2.3, y: 0, z: 0 },
    };

    // Crate a new World
    const world = new World(
      container,
      undefined,
      camneraSettings,
      undefined,
      {
        enabled: true,
        enableDamping: true,
      },
      enableMobileTouchAction,
    );

    world.init = async () => {
      // Load models
      const objectList = await loadGLTFObject(
        [
          {
            path: `${
              import.meta.env.BASE_URL
            }assets/models/obj/avatar/avatarAnim.glb`,
          },
        ],
        (animation) => {
          if (animation.name === "Armature.001|mixamo.com|Layer0") {
            // Remove neck and spine skeleton tracks out of the animation
            animation.tracks.splice(3, 3);
            animation.tracks.splice(3, 3);
            animation.tracks.splice(3, 3);
            animation.tracks.splice(3, 3);
          }
        },
      );
      // Check if the models have been loaded
      // If so add them to the scene
      if (objectList && objectList[0]) {
        // Get the avatar model
        const avatar = objectList[0];

        // Set the position of the model
        avatar.model.position.set(0, -0.9, 0);

        // Rotate the model
        avatar.model.rotation.z = MathUtils.degToRad(-90);

        // Add the model to the updatable list
        world.loop.updatables.push(avatar);

        // Add the model to the scene
        await world.scene.add(avatar.model);

        // Get the neck and waist bones
        avatar.model.traverse((object) => {
          if (object instanceof Bone && object.name === "mixamorigNeck")
            neck = object;
          if (object instanceof Bone && object.name === "mixamorigSpine1")
            waist = object;
        });

        document.addEventListener("mousemove", (event) => {
          var mousecoords = getMousePos(event);
          if (neck && waist) {
            moveJoint(mousecoords, neck, 45, world.renderer.domElement);
            moveJoint(mousecoords, waist, 20, world.renderer.domElement);
          }
        });
      }
    };

    // const mixer = new AnimationMixer()
    // Complete async tasks
    await world.init();

    // Start the animation loop
    world.start();
  };

  const moveJoint = (
    mouse: { x: number; y: number },
    joint: Bone,
    degreeLimit: number,
    canvas: HTMLElement,
  ) => {
    let degrees = getMouseDegrees(mouse.x, mouse.y, degreeLimit, canvas);

    joint.rotation.y = MathUtils.degToRad(degrees.x);
    joint.rotation.x = MathUtils.degToRad(degrees.y);
  };

  main();
</script>

<style>
  #avatar-canvas-container {
    width: 100%;
    height: 100%;
  }
</style>
