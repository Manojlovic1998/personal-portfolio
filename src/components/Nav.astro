---
import Icon, { type Props as IconProps } from "./Icon.astro";
import ThemeToggle from "./ThemeToggle.astro";

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: "Home", href: `${import.meta.env.BASE_URL}` },
  { label: "Work", href: `${import.meta.env.BASE_URL}work/` },
  { label: "About", href: `${import.meta.env.BASE_URL}about/` },
];

/** Icon links to social media â€” edit these with links to your profiles! */
const iconLinks: { label: string; href: string; icon: IconProps["icon"] }[] = [
  {
    label: "GitHub",
    href: "https://github.com/Manojlovic1998",
    icon: "github-logo",
  },
  {
    label: "CodePen",
    href: "https://codepen.io/nemanja-manojlovic",
    icon: "codepen-logo",
  },
  {
    label: "dribbble",
    href: "https://dribbble.com/Manojlovic1998",
    icon: "dribbble-logo",
  },
];
---

<nav
  class="w-full md:max-w-[1616px] flex justify-between items-center md:mt-7 md:mb-7"
>
  <div class="menu-header w-full md:w-fit flex content-between p-6 md:p-0">
    <a
      href={`${import.meta.env.BASE_URL}`}
      class="site-title text-2xl text-skin-base dark:text-skin-base-dark"
    >
      <Icon icon="nlogo" size="41px" />
      <span class="hidden md:inline">Nemanja Manojlovic</span>
    </a>
    <menu-button class="ml-auto">
      <template>
        <button
          class="menu-button z-20 text-burger-light dark:text-burger-dark px-3 py-3 rounded-2xl border dark:border-navigation-primary-dark/[16%] dark:bg-navigation-primary-dark/[8%]"
          aria-expanded="false"
        >
          <span class="sr-only">Menu</span>
          <Icon
            icon="list"
            size="1.75rem"
            color="stroke-nav-icon-primary dark:stroke-nav-icon-primary-dark"
          />
        </button>
      </template>
    </menu-button>
  </div>
  <div
    id="menu-content"
    class="backdrop-blur-sm md:backdrop-blur-none rounded-bl-2xl rounded-br-2xl md:rounded-none overflow-hidden border border-navigation-primary dark:border-navigation-primary-dark/[16%] md:border-none top-0"
  >
    <ul
      class="nav-items flex flex-col justify-center gap-6 md:flex-row bg-navigation-primary/50 dark:bg-navigation-primary-dark/[8%] md:border md:rounded-2xl border-navigation-primary dark:border-navigation-primary-dark/[16%] w-full md:max-w-[416px] md:backdrop-blur-sm md:shadow-navigation dark:shadow-none px-5 pb-6 pt-[5.5rem] md:py-4"
    >
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              aria-current={Astro.url.pathname === href}
              class:list={[
                "link px-4 py-1.5 text-2xl rounded-lg text-skin-base dark:text-skin-base-dark font-bold hover:bg-nav-link-active/[6%] text-skin-base",
                {
                  "bg-nav-link-active text-skin-inverted hover:hover:bg-nav-link-active":
                    Astro.url.pathname === href ||
                    (href !== import.meta.env.BASE_URL &&
                      Astro.url.pathname.startsWith(href)),
                },
              ]}
              href={href}
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
    <div
      class="flex flex-row items-center gap-x-5 w-full md:max-w-[225px] bg-navigation-primary/50 dark:bg-navigation-primary-dark/[8%] md:border md:rounded-full border-navigation-primary dark:border-navigation-primary-dark/[16%] md:backdrop-blur-sm md:shadow-navigation dark:shadow-none px-7 pt-6 pb-7 md:px-3 md:py-1 h-fit"
    >
      <div class="flex flex-row gap-x-5">
        {
          iconLinks.map(({ href, icon, label }) => (
            <a
              href={href}
              target="_blank"
              class="border border-navigation-muted dark:border-navigation-primary-dark/[16%] text-skin-base dark:text-skin-base-dark rounded-full h-fit"
            >
              <span class="sr-only">{label}</span>
              <Icon
                icon={icon}
                size="1.25rem"
                color="stroke-nav-icon-primary dark:stroke-nav-icon-primary-dark"
              />
            </a>
          ))
        }
      </div>

      <div class="theme-toggle">
        <ThemeToggle />
      </div>
    </div>
  </div>
</nav>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector("template")!.content.cloneNode(true));
      const btn = this.querySelector("button")!;

      // Hide menu (shown by default to support no-JS browsers).
      const menu = document.getElementById("menu-content")!;
      menu.hidden = true;

      /** Set whether the menu is currently expanded or collapsed. */
      const setExpanded = (expand: boolean) => {
        btn.setAttribute("aria-expanded", expand ? "true" : "false");
        menu.hidden = !expand;
      };

      // Toggle menu visibility when the menu button is clicked.
      btn.addEventListener("click", () => setExpanded(menu.hidden));

      // Hide menu button for large screens.
      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        setExpanded(e.matches);
        btn.hidden = e.matches;
      };
      const mediaQueries = window.matchMedia("(min-width: 768px)");
      handleViewports(mediaQueries);
      mediaQueries.addEventListener("change", handleViewports);
    }
  }
  customElements.define("menu-button", MenuButton);
</script>

<style>
  nav {
    z-index: 9999;
    position: relative;
  }

  /* .menu-header {
		display: flex;
		justify-content: space-between;
		gap: 0.5rem;
		padding: 1.5rem;
	} */

  .site-title {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    line-height: 1.1;
    color: var(--gray-0);
    text-decoration: none;
  }

  .menu-button {
    position: relative;
    display: flex;
  }

  .menu-button[aria-expanded="true"] {
    color: var(--gray-0);
    background: linear-gradient(180deg, var(--gray-600), transparent),
      radial-gradient(var(--gray-900), var(--gray-800) 150%);
  }

  .menu-button[hidden] {
    display: none;
  }

  .menu-button::before {
    position: absolute;
    inset: -1px;
    content: "";
    background: var(--gradient-stroke);
    border-radius: 999rem;
    z-index: -1;
  }

  #menu-content {
    position: absolute;
    left: 0;
    right: 0;
  }

  .nav-items {
    margin: 0;
    line-height: 1.2;
    list-style: none;
  }

  .link {
    display: inline-block;
    text-decoration: none;
  }

  .menu-footer {
    background-color: var(--gray-999);
  }

  .theme-toggle {
    display: flex;
    align-items: center;
    height: calc(var(--icon-size) + 2 * var(--icon-padding));
  }

  @media (min-width: 50em) {
    /* .menu-header {
			padding: 0;
		} */

    .site-title {
      font-size: var(--text-lg);
    }

    #menu-content {
      display: contents;
    }

    .nav-items {
      position: relative;
    }

    .nav-items::before {
      position: absolute;
      inset: -1px;
      content: "";
      background: var(--gradient-stroke);
      border-radius: 999rem;
      z-index: -1;
    }
  }
  @media (forced-colors: active) {
    .link.active {
      color: SelectedItem;
    }
  }
</style>
